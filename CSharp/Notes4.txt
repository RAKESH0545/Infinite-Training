
Inheritance : extensions of the capabilities of a class

are of the following types
 1. Single
 2. Multi level
 3. Hybrid
No multiple inheritance is supported in C#

There are 2 types of relations broadly 
  1. 'is a relationship' - inheritance
  2. 'has a relationship' (composition/aggregation)

Polymorphism : Ability of an object to respond differently to different messages/ different objects responding differently to the same message
  - Overloading : 1)function overloading
         - are functions with the same name and different signatures in terms of the arguments(i.e. either in the number of arguments or in the data type) 
         - is a concept with a single class
         - we can achieve static polymorphism/compile time polymorphism/early binding (function resolution)          
 
                  2)operator overloading :
              - are also seen within a class
              - are meant to give similar effects as that of systemic types
              - have to be declared always as public and static only
              - the return type is also the same as the enclosing type
              - we can get static polymorphism 

  - Overriding : is seen across related classes
                - the signature has to be always the same
                - does not allow us to change the access specifier, modifier, return type, argument type/nos.
                - derived class has to always use the override modifier, and the base class has to mark the function as virtual
                - we can achieve dynamic polymorphism thru co-variance/late binding

Properties :  are named members of classes, structures and interfaces
              they are extensions of field
              they are accessed using the accessors (get/set)
              properties do not name the storage locations, instead have accessors that read, write , manipulate or compute values of the fields
              they are always public
              they have the same datatype as that of the field for which we are creating property

Interface: are like classes, which contains properties, methods, delegates and events - but only declarations and no implementation
          - Interface members are public by default
          - They do not allow explicit access modifiers
          - The class that implements an interface will have to provide implementation to all members of the interface
          - A class can implement from multiple interfaces
          - One interface can implement other interfaces
          - We cannot instantiate an interface, but reference objects can be created 

Explicit Implementation of interface methods
   - when 1 or more interface has similar signature of methods, and we would like to implement them separately

 
