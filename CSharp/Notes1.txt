Global Assembly Cache  GAC - Shared assemblies

Assembler Tools : ILDASM - IL Disassembler
                  ILASM - IL Assembler

Data Types : are basically either
   1. Value Types -  All integral data types (int, char, float, long, byte, double, decimal etc)
                     are derived from System.ValueType
                     stores data directly
                     are stored in stack memory

   2. Reference Types - All objects of classes, interfaces, Arrays, delegates, etc..
                       contains the memory address of the place where the data is
                       are stored in heap memory


Literals in C# 
   String Literal   == Hello World
   Character   
   Integer
   Null      '/0'
   Real
   Boolean  true/false

Type Conversions  : are of 2 types 
  1. Implicit  - Compiler handles on its own (lower data type to a higher type)
  2. Explicit - using a typecast or conversion functions by the user (may have data loss or can be just different data type conversion)

--Parse() and tryParse()

Conversion between value types and reference types 
 1. Boxing : Converting a value type to a reference type

 2. Unboxing : Converting reference type to value type

--Implicitly Typed data types
   - var : is a type that can take up any other type
           - we need to assign a value at the time of declaration itself
           - once assigned, cannot alter the type

   - dynamic : are reference types that remains dynamic (during compilation)
               - need not initialize at the time of declaration
               - can be assigned any data
               - undergoes boxing/unboxing(conversions) during runtime (performance overhead)
               - advised to minimize the usage of dynamic types

-- Null Literals : as of C# 7.0 all reference types are by default null

Nullables : Generally are unknown information. We can assign normal range of values as well as null values using nullable ('?')

- nullable types bridge the difference between C# types and the database types
- Transformation of nulls and non nulls

Null Coalescing (??)operator can minimize the code of working with nullable values

Operators :

Assignment
Arithmetic
Relational
Logical
Null
Misc - sizeof(), typeof()

Control Statement : execution path of a program 

  - Selection Statements
         if, switch

  - Iteration Statements
         while, do while, for, foreach
       - Initial value
         condition
         termination
  
  - Jump Statements
         break, continue, goto, return, throw
  
goto : are used for transfer of control within the function. 
       They are identified with a valid name followed by a ':'
       unstructured control of flow of statements